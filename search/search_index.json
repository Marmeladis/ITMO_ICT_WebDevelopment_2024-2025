{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"lab1/","title":"Welcome to Web programming","text":"<p>\u041c\u0435\u043d\u044f \u0437\u043e\u0432\u0443\u0442 \u0423\u043b\u044c\u044f\u043d\u0430 \u0415\u0432\u0434\u043e\u043a\u0438\u043c\u043e\u0432\u0430, \u0443\u0447\u0443\u0441\u044c \u0432 \u0433\u0440\u0443\u043f\u043f\u0435 \u041a3340. \u0417\u0434\u0435\u0441\u044c \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f \u043a \u043c\u043e\u0438\u043c \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u044b\u043c \u0440\u0430\u0431\u043e\u0442\u0430\u043c \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435.</p>"},{"location":"lab1/#_1","title":"\u041b\u0430\u0431\u044b:","text":"<ul> <li>LAB \u21161</li> <li>LAB \u21162</li> <li>LAB \u21163</li> <li>LAB \u21164</li> </ul>"},{"location":"lab1/task1/","title":"Task 1","text":"<p>\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043e\u0442\u0441\u044b\u043b\u0430\u0435\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, server\u00bb. \u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u043d\u0430 \u0441\u0442\u043e\u0440\u043e\u043d\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u0430. \u0421\u0435\u0440\u0432\u0435\u0440 \u0432 \u043e\u0442\u0432\u0435\u0442 \u043e\u0442\u0441\u044b\u043b\u0430\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, client\u00bb. \u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u043e\u0431\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u0443 \u043a\u043b\u0438\u0435\u043d\u0442\u0430. \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 socket \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0430 UDP</p> <p>server.py</p> <pre><code>import socket\n\nserver_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n\nserver_socket.bind(('localhost', 8080))\n\nserver_socket.listen(1)\nprint(\"\u0421\u0435\u0440\u0432\u0435\u0440 \u0437\u0430\u043f\u0443\u0449\u0435\u043d \u043d\u0430 \u043f\u043e\u0440\u0442\u0443 8080...\")\n\nwhile True:\n    client_connection, client_address = server_socket.accept()\n    print(f'\u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043e\u0442 {client_address}')\n\n    request = client_connection.recv(1024).decode()\n    print(f'\u0417\u0430\u043f\u0440\u043e\u0441 \u043e\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0430: {request}')\n\n    response = '\u041f\u0440\u0438\u0432\u0435\u0442 \u043e\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0430!'\n    client_connection.sendall(response.encode())\n\n    client_connection.close()\n</code></pre> <p>client.py</p> <pre><code>import socket\n\nclient_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n\nclient_socket.connect(('localhost', 8080))\n\nclient_socket.sendall(b'Hello, server!')\n\nresponse = client_socket.recv(1024)\nprint(f'\u041e\u0442\u0432\u0435\u0442 \u043e\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0430: {response.decode()}')\n\nclient_socket.close()\n</code></pre>"},{"location":"lab1/task2/","title":"Task 2","text":"<p>\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u0437\u0430\u043f\u0440\u0430\u0448\u0438\u0432\u0430\u0435\u0442 \u0443 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438, \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0432\u0432\u043e\u0434\u044f\u0442\u0441\u044f \u0441 \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u044b. \u0421\u0435\u0440\u0432\u0435\u0440 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443. \u0412\u0430\u0440\u0438\u0430\u043d\u0442:</p> <p>a. \u0422\u0435\u043e\u0440\u0435\u043c\u0430 \u041f\u0438\u0444\u0430\u0433\u043e\u0440\u0430</p> <p>b. \u0420\u0435\u0448\u0435\u043d\u0438\u0435 \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043d\u043e\u0433\u043e \u0443\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f.*</p> <p>c. \u041f\u043e\u0438\u0441\u043a \u043f\u043b\u043e\u0449\u0430\u0434\u0438 \u0442\u0440\u0430\u043f\u0435\u0446\u0438\u0438.</p> <p>d. \u041f\u043e\u0438\u0441\u043a \u043f\u043b\u043e\u0449\u0430\u0434\u0438 \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u043e\u0433\u0440\u0430\u043c\u043c\u0430.</p> <p>\u0412\u0430\u0440\u0438\u0430\u043d\u0442 \u0432\u044b\u0431\u0438\u0440\u0430\u0435\u0442\u0441\u044f \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0438 \u0441 \u043f\u043e\u0440\u044f\u0434\u043a\u043e\u0432\u044b\u043c \u043d\u043e\u043c\u0435\u0440\u043e\u043c \u0432 \u0436\u0443\u0440\u043d\u0430\u043b\u0435. \u041f\u044f\u0442\u044b\u0439 \u0441\u0442\u0443\u0434\u0435\u043d\u0442 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0432\u0430\u0440\u0438\u0430\u043d\u0442 1 \u0438 \u0442.\u0434. \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 socket \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0430 TCP</p> <p>server.py</p> <pre><code>import socket\nimport math\n\n\ndef solve_quadratic(a, b, c):\n    discriminant = b ** 2 - 4 * a * c\n\n    if discriminant &gt; 0:\n        root1 = (-b + math.sqrt(discriminant)) / (2 * a)\n        root2 = (-b - math.sqrt(discriminant)) / (2 * a)\n        return f\"\u0414\u0432\u0430 \u043a\u043e\u0440\u043d\u044f: {root1} \u0438 {root2}\"\n    elif discriminant == 0:\n        root = -b / (2 * a)\n        return f\"\u041e\u0434\u0438\u043d \u043a\u043e\u0440\u0435\u043d\u044c: {root}\"\n    else:\n        return \"\u0414\u0435\u0439\u0441\u0442\u0432\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u043a\u043e\u0440\u043d\u0435\u0439 \u043d\u0435\u0442\"\n\n\nserver_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\nserver_socket.bind(('localhost', 8080))\nserver_socket.listen(1)\nprint(\"\u0421\u0435\u0440\u0432\u0435\u0440 \u0437\u0430\u043f\u0443\u0449\u0435\u043d \u043d\u0430 \u043f\u043e\u0440\u0442\u0443 8080...\")\n\nwhile True:\n    client_connection, client_address = server_socket.accept()\n    print(f'\u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043e\u0442 {client_address}')\n\n    data = client_connection.recv(1024).decode()\n    if not data:\n        break\n\n    a, b, c = map(float, data.split())\n    result = solve_quadratic(a, b, c)\n\n    client_connection.send(result.encode())\n    print(f'\u041e\u0442\u043f\u0440\u0430\u0432\u043b\u0435\u043d \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442: {result}')\n\n    client_connection.close()\n\n</code></pre> <p>client.py</p> <pre><code>import socket\n\nclient_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\nclient_socket.connect(('localhost', 8080))\n\na = float(input(\"\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u043a\u043e\u044d\u0444\u0444\u0438\u0446\u0438\u0435\u043d\u0442 a: \"))\nb = float(input(\"\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u043a\u043e\u044d\u0444\u0444\u0438\u0446\u0438\u0435\u043d\u0442 b: \"))\nc = float(input(\"\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u043a\u043e\u044d\u0444\u0444\u0438\u0446\u0438\u0435\u043d\u0442 c: \"))\n\nmessage = f\"{a} {b} {c}\"\nclient_socket.send(message.encode())\n\nresult = client_socket.recv(1024).decode()\nprint(f\"\u0420\u0435\u0448\u0435\u043d\u0438\u0435 \u0443\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f: {result}\")\n\nclient_socket.close()\n\n</code></pre>"},{"location":"lab1/task3/","title":"Task 3","text":"<p>\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443. \u0412 \u043e\u0442\u0432\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 http-\u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0435\u0435 html-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443, \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u0441\u0435\u0440\u0432\u0435\u0440 \u043f\u043e\u0434\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u0438\u0437 \u0444\u0430\u0439\u043b\u0430 index.html.</p> <p>server.py</p> <pre><code>import socket\n\nserver_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n\nserver_socket.bind(('localhost', 8080))\n\nserver_socket.listen(1)\nprint(\"\u0421\u0435\u0440\u0432\u0435\u0440 \u0437\u0430\u043f\u0443\u0449\u0435\u043d \u043d\u0430 \u043f\u043e\u0440\u0442\u0443 8080...\")\n\nwhile True:\n    client_connection, client_address = server_socket.accept()\n    print(f'\u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043e\u0442 {client_address}')\n\n    with open('index.html', 'r') as f:\n        content = f.read()\n\n    response = f\"HTTP/1.1 200 OK\\r\\nContent-Type: text/html\\r\\nContent-Length: {len(content)}\\r\\n\\r\\n{content}\"\n    client_connection.sendall(response.encode())\n\n    client_connection.close()\n\n</code></pre> <p>index.html</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;Simple HTTP Server&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;Welcome to Uliana's lab1&lt;/h1&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n\n</code></pre>"},{"location":"lab1/task4/","title":"Task 4","text":"<p>\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u0432\u0443\u0445\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0438\u043b\u0438 \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0447\u0430\u0442. \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0447\u0430\u0441\u0430 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0431\u0430\u043b\u043b\u043e\u0432. \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0430 TCP \u2013 100% \u0431\u0430\u043b\u043b\u043e\u0432, \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e UDP \u2013 80%.</p> <p>\u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 threading. \u0414\u043b\u044f \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e UDP, thearding \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u0443 \u043a\u043b\u0438\u0435\u043d\u0442\u0430.</p> <p>\u0414\u043b\u044f \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0441 TCP \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0438\u0435 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u0418 \u043f\u0440\u0438\u0435\u043c \u0438 \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u0432\u0441\u0435\u043c \u044e\u0437\u0435\u0440\u0430\u043c \u043d\u0430 \u0441\u0435\u0440\u0432\u0435\u0440\u0435 \u0432 \u043f\u043e\u0442\u043e\u043a\u0430\u0445. \u041d\u0435 \u0437\u0430\u0431\u0443\u0434\u044c\u0442\u0435 \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0442\u044c \u044e\u0437\u0435\u0440\u043e\u0432, \u0447\u0442\u043e\u0431\u044b \u043f\u043e\u0442\u043e\u043c \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u0438\u043c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f.</p> <p>server.py</p> <pre><code>import socket\nimport threading\n\nHOST = '127.0.0.1'\nPORT = 8080\n\nclients = {}\naddresses = {}\n\n\ndef handle_client(client_socket, client_address):\n    try:\n        name = client_socket.recv(1024).decode()\n        welcome_message = f\"{name} \u043f\u0440\u0438\u0441\u043e\u0435\u0434\u0438\u043d\u0438\u043b\u0441\u044f \u043a \u0447\u0430\u0442\u0443.\"\n        broadcast(bytes(welcome_message, \"utf-8\"))\n        clients[client_socket] = name\n        addresses[client_socket] = client_address\n\n        while True:\n            message = client_socket.recv(1024)\n            if message:\n                broadcast(message, f\"{name}: \")\n            else:\n                remove(client_socket)\n                break\n    except Exception as e:\n        print(f\"[ERROR] \u041e\u0448\u0438\u0431\u043a\u0430 \u043f\u0440\u0438 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0435 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 {client_address}: {e}\")\n        remove(client_socket)\n\n\ndef broadcast(message, prefix=\"\"):\n    for sock in clients:\n        try:\n            sock.send(bytes(prefix, \"utf-8\") + message)\n        except Exception as e:\n            print(f\"[ERROR] \u041d\u0435 \u0443\u0434\u0430\u043b\u043e\u0441\u044c \u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u044c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435: {e}\")\n\n\ndef remove(client_socket):\n    name = clients[client_socket]\n    del clients[client_socket]\n    del addresses[client_socket]\n    leave_message = f\"{name} \u043f\u043e\u043a\u0438\u043d\u0443\u043b \u0447\u0430\u0442.\"\n    broadcast(bytes(leave_message, \"utf-8\"))\n\n\ndef main():\n    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as server_socket:\n        server_socket.bind((HOST, PORT))\n        server_socket.listen()\n        print(\"\u0421\u0435\u0440\u0432\u0435\u0440 \u0437\u0430\u043f\u0443\u0449\u0435\u043d \u043d\u0430 \u043f\u043e\u0440\u0442\u0443\", PORT)\n\n        while True:\n            client_socket, client_address = server_socket.accept()\n            print(f\"\u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0438\u043b\u0441\u044f \u043a\u043b\u0438\u0435\u043d\u0442 {client_address}\")\n            client_socket.send(bytes(\"\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u0432\u0430\u0448\u0435 \u0438\u043c\u044f: \", \"utf-8\"))\n            threading.Thread(target=handle_client, args=(client_socket, client_address)).start()\n\n\nif __name__ == \"__main__\":\n    main()\n\n</code></pre> <p>client1.py (\u0430\u043d\u0430\u043b\u043e\u0433\u0438\u0447\u043d\u043e client2.py \u0438 client3.py)</p> <pre><code>import socket\nimport threading\n\nHOST = '127.0.0.1'\nPORT = 8080\n\n\ndef receive_messages(server):\n    while True:\n        try:\n            data = server.recv(1024).decode()\n            if not data:\n                print(\"[SERVER DISCONNECTED]\")\n                break\n            print(data)\n        except Exception as e:\n            print(f\"[ERROR] \u041e\u0448\u0438\u0431\u043a\u0430 \u043f\u0440\u0438 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0438 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f: {e}\")\n            break\n\n\ndef main():\n    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:\n        try:\n            s.connect((HOST, PORT))\n            print(f\"[CONNECTED] \u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u043e \u043a {HOST}:{PORT}\")\n\n            threading.Thread(target=receive_messages, args=(s,), daemon=True).start()\n\n            while True:\n                message = input()\n                if message.lower() == 'exit':\n                    print(\"[DISCONNECTED] \u041e\u0442\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043e\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0430...\")\n                    break\n                s.send(message.encode())\n        except ConnectionRefusedError:\n            print(\"[ERROR] \u041d\u0435 \u0443\u0434\u0430\u043b\u043e\u0441\u044c \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0438\u0442\u044c\u0441\u044f \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443. \u0423\u0431\u0435\u0434\u0438\u0442\u0435\u0441\u044c, \u0447\u0442\u043e \u043e\u043d \u0437\u0430\u043f\u0443\u0449\u0435\u043d.\")\n        except Exception as e:\n            print(f\"[ERROR] \u041e\u0448\u0438\u0431\u043a\u0430: {e}\")\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"lab1/task5/","title":"Task 5","text":"<p>\u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u043f\u0440\u043e\u0441\u0442\u043e\u0439 web-\u0441\u0435\u0440\u0432\u0435\u0440 \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 GET \u0438 POST http \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Python \u0438 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 socket.</p> <p>\u0417\u0430\u0434\u0430\u043d\u0438\u0435: \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0441\u0435\u0440\u0432\u0435\u0440, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043c\u043e\u0436\u0435\u0442:</p> <p>\u25cf \u041f\u0440\u0438\u043d\u044f\u0442\u044c \u0438 \u0437\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435 \u0438 \u043e\u0446\u0435\u043d\u043a\u0435 \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435.</p> <p>\u25cf \u041e\u0442\u0434\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e\u0431\u043e \u0432\u0441\u0435\u0445 \u043e\u0446\u0435\u043d\u0430\u0445 \u043f\u043e \u0434\u0441\u0438\u0446\u0438\u043f\u043b\u0438\u043d\u0435 \u0432 \u0432\u0438\u0434\u0435 html-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b.</p> <p>plainhttp_server.py</p> <pre><code>import socket\n\ngrades = {}\n\ndef generate_html():\n    html = \"\"\"\n    &lt;html&gt;\n        &lt;head&gt;&lt;title&gt;Grades by Subject&lt;/title&gt;&lt;/head&gt;\n        &lt;body&gt;\n            &lt;h1&gt;Grades by Subject&lt;/h1&gt;\n            &lt;table border=\"1\"&gt;\n                &lt;tr&gt;\n                    &lt;th&gt;Subject&lt;/th&gt;\n                    &lt;th&gt;Grades&lt;/th&gt;\n                &lt;/tr&gt;\n    \"\"\"\n    for subject, grade_list in grades.items():\n        grades_str = \", \".join(grade_list)\n        html += f\"&lt;tr&gt;&lt;td&gt;{subject}&lt;/td&gt;&lt;td&gt;{grades_str}&lt;/td&gt;&lt;/tr&gt;\"\n\n    html += \"\"\"\n            &lt;/table&gt;\n            &lt;h2&gt;Add a new grade&lt;/h2&gt;\n            &lt;form method=\"POST\" action=\"/\"&gt;\n                Subject: &lt;input type=\"text\" name=\"subject\"&gt;&lt;br&gt;\n                Grade: &lt;input type=\"text\" name=\"grade\"&gt;&lt;br&gt;\n                &lt;input type=\"submit\" value=\"Add\"&gt;\n            &lt;/form&gt;\n        &lt;/body&gt;\n    &lt;/html&gt;\n    \"\"\"\n    return html\n\ndef handle_get():\n    response_body = generate_html()\n    response = (\n            \"HTTP/1.1 200 OK\\r\\n\"\n            \"Content-Type: text/html\\r\\n\"\n            f\"Content-Length: {len(response_body)}\\r\\n\"\n            \"\\r\\n\" +\n            response_body\n    )\n    return response\n\ndef handle_post(request):\n    global grades\n\n    try:\n        body = request.split(\"\\r\\n\\r\\n\")[1]\n        params = body.split('&amp;')\n\n        subject = None\n        grade = None\n\n        for param in params:\n            key, value = param.split('=')\n            if key == 'subject':\n                subject = value.replace('+', ' ').replace('%20', ' ')\n            elif key == 'grade':\n                grade = value.replace('+', ' ').replace('%20', ' ')\n\n        if subject and grade:\n            if subject in grades:\n                grades[subject].append(grade)\n            else:\n                grades[subject] = [grade]\n\n    except Exception as e:\n        print(f\"Error processing POST request: {e}\")\n\n    return handle_get()\n\ndef run_server():\n    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    server_socket.bind(('0.0.0.0', 8080))\n    server_socket.listen(1)\n    print(\"Server is running on port 8080...\")\n\n    while True:\n        client_socket, client_address = server_socket.accept()\n        print(f\"Received request from {client_address}\")\n\n        request = client_socket.recv(1024).decode()\n        if request.startswith(\"GET\"):\n            response = handle_get()\n        elif request.startswith(\"POST\"):\n            response = handle_post(request)\n        else:\n            response = \"HTTP/1.1 405 Method Not Allowed\\r\\n\\r\\n\"\n\n        client_socket.sendall(response.encode())\n        client_socket.close()\n\nif __name__ == \"__main__\":\n    run_server()\n\n\n</code></pre>"},{"location":"lab3/bookings/","title":"Bookings","text":""},{"location":"lab3/bookings/#bookings","title":"Bookings.","text":""},{"location":"lab3/bookings/#_1","title":"\u041e\u0442\u0432\u0435\u0447\u0430\u0435\u0442 \u0437\u0430 \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0435 \u0441 \u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u043d\u043e\u043c\u0435\u0440\u043e\u0432.","text":""},{"location":"lab3/bookings/#modelspy","title":"models.py:","text":"<pre><code>class Booking(models.Model):\n    booking_date = models.DateField(null=False, default=timezone.now)\n    from_town = models.CharField(max_length=30)\n    check_in_time = models.DateTimeField(null=True)\n    departure_time = models.DateTimeField(null=True)\n    full_days = models.IntegerField(default=0)\n    state = models.CharField(max_length=30)\n    payment_status = models.CharField(max_length=30)\n    client = models.ForeignKey(UserAccount, on_delete=models.CASCADE, null=False, related_name='bookings')\n    room = models.ForeignKey(Room, on_delete=models.CASCADE, null=False, related_name='bookings')\n\n    def __str__(self):\n        return f\"Booking from {self.booking_date} by {self.client.firstname} {self.client.lastname}, room {self.room.number}\"\n\n</code></pre>"},{"location":"lab3/bookings/#serializerspy","title":"serializers.py:","text":"<pre><code>class BookingSerializer(serializers.ModelSerializer):\n    client = UserAccountSerializer()\n    room = RoomSerializer()\n\n    class Meta:\n        model = Booking\n        fields = ['id', 'booking_date', 'from_town', 'check_in_time', 'departure_time', 'full_days', 'state', 'payment_status', 'client', 'room']\n\n    def create(self, validated_data):\n        client_data = validated_data.pop('client')\n        room_data = validated_data.pop('room')\n\n        room_type_data = room_data.pop('room_type')\n        room_type, _ = RoomType.objects.get_or_create(**room_type_data)\n\n        room, _ = Room.objects.get_or_create(room_type=room_type, **room_data)\n\n        client, _ = UserAccount.objects.get_or_create(email=client_data['email'], defaults=client_data)\n\n        booking = Booking.objects.create(client=client, room=room, **validated_data)\n        return booking\n</code></pre>"},{"location":"lab3/employees/","title":"Employees","text":""},{"location":"lab3/employees/#employees","title":"Employees.","text":""},{"location":"lab3/employees/#o","title":"O\u0442\u0432\u0435\u0447\u0430\u0435\u0442 \u0437\u0430 \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0435 \u0441 \u0440\u0430\u0431\u043e\u0442\u043d\u0438\u043a\u0430\u043c\u0438/\u0440\u0430\u0441\u043f\u0438\u0441\u0430\u043d\u0438\u0435\u043c.","text":""},{"location":"lab3/employees/#modelspy","title":"models.py:","text":"<pre><code>class Employee(models.Model):\n    firstname = models.CharField(max_length=30, null=False)\n    lastname = models.CharField(max_length=30, null=False)\n    patronymic = models.CharField(max_length=30)\n    email = models.EmailField(null=False)\n    phone = models.CharField(max_length=15, null=False)\n\n    def __str__(self):\n        return f'Employee {self.firstname} {self.lastname}'\n\n\nclass Position(models.Model):\n    name = models.CharField(max_length=30, null=False)\n    description = models.TextField()\n\n    def __str__(self):\n        return f'Position {self.name} : {self.description}'\n\n\nclass SalaryHistory(models.Model):\n    salary = models.IntegerField(null=False)\n    start_date = models.DateField(null=False, default=timezone.now)\n    end_date = models.DateField(null=True)\n    position = models.ForeignKey('Position', on_delete=models.CASCADE, null=False, related_name='salary_history')\n\n    class Meta:\n        constraints = [\n            models.CheckConstraint(condition=models.Q(salary__gt=0), name='salary &gt; 0'),\n        ]\n\n\nclass Contract(models.Model):\n    start_date = models.DateField(null=False, default=timezone.now)\n    end_date = models.DateField(null=True)\n    working_status = models.CharField(max_length=30, null=False)\n    employee = models.ForeignKey('Employee', on_delete=models.CASCADE, null=False, related_name='contracts')\n    position = models.ForeignKey('Position', on_delete=models.CASCADE, null=False, related_name='contracts')\n\n    def __str__(self):\n        return f'Contract from {self.start_date}. Employee {self.employee.firstname} {self.position.name}'\n\n\nclass WorkSchedule(models.Model):\n    start_time = models.DateTimeField(null=False)\n    end_time = models.DateTimeField(null=True)\n    is_done = models.BooleanField(default=False)\n    contract = models.ForeignKey('Contract', on_delete=models.CASCADE, null=False, related_name='work_schedule')\n    room = models.ForeignKey(Room, on_delete=models.CASCADE, null=False, related_name='work_schedule')\n\n    def __str__(self):\n        return f'Work schedule from {self.start_time} to {self.end_time} room {self.room.number}'\n\n</code></pre>"},{"location":"lab3/employees/#serializerspy","title":"serializers.py:","text":"<pre><code>class EmployeeSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Employee\n        fields = ['id', 'firstname', 'lastname', 'patronymic', 'email', 'phone']\n\n\nclass PositionSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Position\n        fields = ['id', 'name', 'description']\n\n\nclass SalaryHistorySerializer(serializers.ModelSerializer):\n    position = PositionSerializer()\n\n    class Meta:\n        model = SalaryHistory\n        fields = ['id', 'salary', 'start_date', 'end_date', 'position']\n\n\nclass ContractSerializer(serializers.ModelSerializer):\n    employee = EmployeeSerializer()\n    position = PositionSerializer()\n\n    class Meta:\n        model = Contract\n        fields = ['id', 'start_date', 'end_date', 'working_status', 'employee', 'position']\n\n\nclass WorkScheduleSerializer(serializers.ModelSerializer):\n    contract = ContractSerializer()\n    room = RoomSerializer()\n\n    class Meta:\n        model = WorkSchedule\n        fields = ['id', 'start_time', 'end_time', 'is_done', 'contract', 'room']\n\n</code></pre>"},{"location":"lab3/main/","title":"Database","text":""},{"location":"lab3/main/#_1","title":"\u041c\u043e\u0434\u0435\u043b\u044c \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445 :","text":""},{"location":"lab3/rooms/","title":"Rooms","text":""},{"location":"lab3/rooms/#room","title":"Room.","text":""},{"location":"lab3/rooms/#_1","title":"\u041e\u0442\u0432\u0435\u0447\u0430\u0435\u0442 \u0437\u0430 \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0435 \u0441 \u043d\u043e\u043c\u0435\u0440\u0430\u043c\u0438 \u043e\u0442\u0435\u043b\u044f.","text":""},{"location":"lab3/rooms/#modelspy","title":"models.py:","text":"<pre><code>class Room(models.Model):\n    number = models.CharField(unique=True, max_length=4)\n    area = models.IntegerField(null=False)\n    is_occupied = models.BooleanField(default=False)\n    is_cleaned = models.BooleanField(default=True)\n    floor = models.IntegerField(null=False)\n    room_type = models.ForeignKey('RoomType', on_delete=models.CASCADE, null=False, related_name='rooms')\n\n    class Meta:\n        constraints = [\n            models.CheckConstraint(condition=models.Q(number__regex=r'\\d{3,4}'), name='number_constraint'),\n            models.CheckConstraint(condition=models.Q(floor__gte=0), name='floor_constraint'),\n        ]\n\n    def __str__(self):\n        return f\"room {self.number}, {self.area} sq meters, is_occupied: {self.is_occupied}\"\n\n\nclass RoomType(models.Model):\n    name = models.CharField(unique=True, max_length=30, null=False)\n    places = models.IntegerField(null=False)\n    description = models.TextField()\n\n    class Meta:\n        constraints = [\n            models.CheckConstraint(condition=models.Q(places__lte=4), name='places &lt;= 4'),\n            models.CheckConstraint(condition=models.Q(places__gte=1), name='places &gt;= 1')\n        ]\n\n    def __str__(self):\n        return \"room type:\" + self.name\n\n\nclass RoomTypePrice(models.Model):\n    day_price = models.IntegerField(null=False)\n    start_date = models.DateField(null=False, default=timezone.now)\n    end_date = models.DateField()\n    room_type = models.ForeignKey('RoomType', on_delete=models.CASCADE, null=False, related_name='prices')\n\n    class Meta:\n        constraints = [\n            models.CheckConstraint(condition=models.Q(day_price__gt=0), name='price &gt; 0'),\n        ]\n\n\n</code></pre>"},{"location":"lab3/rooms/#serializerspy","title":"serializers.py:","text":"<pre><code>class RoomTypeSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = RoomType\n        fields = ['id', 'name', 'places', 'description']\n\n\nclass RoomTypePriceSerializer(serializers.ModelSerializer):\n    room_type = RoomTypeSerializer()\n\n    class Meta:\n        model = RoomTypePrice\n        fields = ['id', 'day_price', 'start_date', 'end_date', 'room_type']\n\n\nclass RoomSerializer(serializers.ModelSerializer):\n    room_type = RoomTypeSerializer()\n\n    class Meta:\n        model = Room\n        fields = ['id', 'number', 'area', 'is_occupied', 'is_cleaned', 'floor', 'room_type']\n\n</code></pre>"},{"location":"lab3/users/","title":"Users","text":""},{"location":"lab3/users/#users","title":"Users.","text":""},{"location":"lab3/users/#_1","title":"\u041e\u0442\u0432\u0435\u0447\u0430\u0435\u0442 \u0437\u0430 \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0435 \u0441 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\u043c\u0438, \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u043e\u0432\u0430\u043d\u043d\u044b\u043c\u0438 \u0432 \u0441\u0438\u0441\u0442\u0435\u043c\u0435","text":""},{"location":"lab3/users/#modelspy","title":"models.py:","text":"<pre><code>class UserAccount(AbstractBaseUser, PermissionsMixin):\n    email = models.EmailField(verbose_name='email_address', unique=True, max_length=64)\n    firstname = models.CharField(max_length=30, null=False)\n    lastname = models.CharField(max_length=30, null=False)\n    patronymic = models.CharField(max_length=30, null=False)\n    phone = models.CharField(max_length=15, null=False)\n    date_joined = models.DateTimeField(default=timezone.now)\n    birth_date = models.DateField(blank=True)\n    is_staff = models.BooleanField(default=False)\n    is_active = models.BooleanField(default=True)\n\n    USERNAME_FIELD = 'email'\n    REQUIRED_FIELDS = ['firstname', 'lastname', 'phone', 'birth_date']\n\n    objects = AccountManager()\n\n    class Meta:\n        verbose_name = 'user'\n        verbose_name_plural = 'users'\n\n    @property\n    def is_admin(self):\n        return self.is_staff\n\n    def has_perm(self, perm, obj=None):\n        return True\n\n    def has_module_perms(self, app_label):\n        return True\n\n    def __str__(self):\n        return f\"{self.firstname} {self.lastname}. \u0414\u0430\u0442\u0430 \u0440\u043e\u0436\u0434\u0435\u043d\u0438\u044f: {self.birth_date}. \u044d\u043b. \u043f\u043e\u0447\u0442\u0430: {self.email}\"\n</code></pre>"},{"location":"lab3/users/#serializerspy","title":"serializers.py:","text":"<pre><code>class UserAccountSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = UserAccount\n        fields = ['id', 'email', 'firstname', 'lastname', 'patronymic', 'phone', 'date_joined', 'birth_date', 'is_staff', 'is_active', 'groups', 'user_permissions']\n\n\n</code></pre>"},{"location":"lab3/endpoints/add_booking/","title":"Add Booking","text":""},{"location":"lab3/endpoints/add_booking/#_1","title":"\u041f\u0440\u0438\u043c\u0435\u0440 \u0437\u0430\u043f\u0440\u043e\u0441\u0430: \u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043d\u043e\u0432\u043e\u0433\u043e \u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f","text":""},{"location":"lab3/endpoints/add_booking/#url-apibookings","title":"URL: <code>/api/bookings/</code>","text":""},{"location":"lab3/endpoints/add_booking/#method-post","title":"Method: <code>POST</code>","text":""},{"location":"lab3/endpoints/add_booking/#_2","title":"\u0417\u0430\u043f\u0440\u043e\u0441:","text":"<pre><code>{\n  \"booking_date\": \"2025-01-19\",\n  \"from_town\": \"Moscow\",\n  \"check_in_time\": \"2025-01-19T14:00:00Z\",\n  \"departure_time\": \"2025-01-24T12:00:00Z\",\n  \"full_days\": 5,\n  \"state\": \"confirmed\",\n  \"payment_status\": \"paid\",\n  \"client\": {\n    \"email\": \"mikesrrr@example.com\",\n    \"firstname\": \"Uliana\",\n    \"lastname\": \"Evdokimova\",\n    \"patronymic\": \"Ne Skaju\",\n    \"phone\": \"123456890\",\n    \"birth_date\": \"1991-01-01\"\n  },\n  \"room\": {\n    \"number\": \"390\",\n    \"area\": 25,\n    \"is_occupied\": false,\n    \"is_cleaned\": true,\n    \"floor\": 1,\n    \"room_type\": {\n      \"name\": \"Lux\",\n      \"places\": 2,\n      \"description\": \"Luxary\"\n    }\n  }\n}\n</code></pre>"},{"location":"lab3/endpoints/add_booking/#code-201-created","title":"Code: <code>201 Created</code>","text":""},{"location":"lab3/endpoints/room_users/","title":"Rooms Per Floor","text":""},{"location":"lab3/endpoints/room_users/#_1","title":"\u0417\u0430\u043f\u0440\u043e\u0441: \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u043e\u043c\u043d\u0430\u0442 \u043d\u0430 \u044d\u0442\u0430\u0436\u0430\u0445","text":""},{"location":"lab3/endpoints/room_users/#url-http1270018000apirooms-per-floor","title":"URL: <code>http://127.0.0.1:8000/api/rooms-per-floor/</code>","text":""},{"location":"lab3/endpoints/room_users/#method-get","title":"Method: <code>GET</code>","text":""},{"location":"lab3/endpoints/room_users/#_2","title":"\u041e\u0442\u0432\u0435\u0442:","text":"<pre><code>[\n    {\n        \"floor\": 1,\n        \"room_count\": 1\n    },\n    {\n        \"floor\": 2,\n        \"room_count\": 4\n    },\n    {\n        \"floor\": 4,\n        \"room_count\": 1\n    }\n]\n</code></pre>"},{"location":"lab3/endpoints/users_town/","title":"Users Town","text":""},{"location":"lab3/endpoints/users_town/#_1","title":"\u0417\u0430\u043f\u0440\u043e\u0441: \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0441\u043f\u0438\u0441\u043e\u043a \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043f\u0440\u0438\u0431\u044b\u043b\u0438 \u0438\u0437 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u043e\u0433\u043e \u0433\u043e\u0440\u043e\u0434\u0430","text":""},{"location":"lab3/endpoints/users_town/#url-http1270018000apiclients-from-citycity_name","title":"URL: <code>http://127.0.0.1:8000/api/clients-from-city/?city_name=\u041c\u043e\u0441\u043a\u0432\u0430</code>","text":""},{"location":"lab3/endpoints/users_town/#method-get","title":"Method: <code>GET</code>","text":""},{"location":"lab3/endpoints/users_town/#_2","title":"\u041e\u0442\u0432\u0435\u0442:","text":"<pre><code>{\n    \"city_name\": \"\u041c\u043e\u0441\u043a\u0432\u0430\",\n    \"client_count\": 1\n}\n</code></pre>"},{"location":"lab_4/auth/","title":"Auth","text":""},{"location":"lab_4/auth/#_1","title":"\u0410\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \u0432 \u0441\u0438\u0441\u0442\u0435\u043c\u0435:","text":""},{"location":"lab_4/auth/#_2","title":"\u0421\u043a\u0440\u0438\u043f\u0442 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b:","text":"<pre><code>   &lt;div class=\"d-flex align-center\"&gt;\n        &lt;template v-if=\"!token.token\"&gt;\n          &lt;router-link to=\"/login\" style=\"text-decoration: none; color: inherit;\"&gt;\n            &lt;v-list-item link title=\"\u0412\u043e\u0439\u0442\u0438\"&gt;&lt;/v-list-item&gt;\n          &lt;/router-link&gt;\n          &lt;router-link to=\"/register\" style=\"text-decoration: none; color: inherit;\"&gt;\n            &lt;v-list-item link title=\"\u0417\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f\"&gt;&lt;/v-list-item&gt;\n          &lt;/router-link&gt;\n        &lt;/template&gt;\n        &lt;template v-else&gt;\n          &lt;v-list-item class=\"text-red\" @click=\"logout\"&gt;\u0412\u044b\u0439\u0442\u0438&lt;/v-list-item&gt;\n        &lt;/template&gt;\n      &lt;/div&gt;\n    &lt;/v-app-bar&gt;\n</code></pre>"},{"location":"lab_4/auth/#_3","title":"\u0412\u043d\u0435\u0448\u043d\u0438\u0439 \u0432\u0438\u0434 \u0444\u043e\u0440\u043c\u044b \u0434\u043b\u044f \u0432\u0445\u043e\u0434\u0430","text":""},{"location":"lab_4/bookings/","title":"Bookings","text":""},{"location":"lab_4/bookings/#_1","title":"\u0418\u0441\u0442\u043e\u0440\u0438\u044f \u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0439 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f:","text":""},{"location":"lab_4/bookings/#_2","title":"\u0421\u043a\u0440\u0438\u043f\u0442 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b:","text":"<pre><code>  &lt;script setup&gt;\nimport {onMounted, ref} from \"vue\";\nimport axios from \"axios\";\nimport BookingModal from \"@/components/BookingModal.vue\";\nimport BookingList from \"@/components/BookingList.vue\";\nimport {tokenStore} from \"@/stores/token.js\";\n\nconst token = tokenStore();\nconst reservations = ref([]);\nconst clients = ref([]);\nconst rooms = ref([]);\nconst isModalVisible = ref(false);\nconst selectedBooking = ref(null);\nconst isLoading = ref(true);\n\nasync function fetchBookings() {\n  await axios.get(\"bookings/\").then((response) =&gt; {\n    if (response.status === 200) {\n      reservations.value = response.data;\n      isLoading.value = false\n    }\n  }).catch((error) =&gt; {\n    console.log(error);\n  });\n}\n\nasync function fetchClients() {\n  await axios.get(\"useraccounts/\").then((response) =&gt; {\n    if (response.status === 200) {\n      clients.value = response.data;\n    }\n  }).catch((error) =&gt; {\n    console.log(error);\n  });\n}\n\nasync function fetchRooms() {\n  await axios.get(\"rooms/\").then((response) =&gt; {\n    if (response.status === 200) {\n      rooms.value = response.data;\n    }\n  }).catch((error) =&gt; {\n    console.log(error);\n  });\n}\n\nasync function saveBooking(booking) {\n  if (booking.id) {\n    let newBooking = {...booking};\n\n    newBooking.room = booking.room.id || booking.room;\n    newBooking.client = booking.client.id || booking.client;\n\n    await axios.put(`bookings/${booking.id}/`, newBooking).catch((error) =&gt; {\n      console.log(error);\n    });\n  } else {\n    const newBooking = {...booking, state: \"confirmed\", payment_status: \"not paid\"};\n    await axios.post(\"bookings/\", newBooking).catch((error) =&gt; {\n      console.log(error);\n    });\n  }\n  await fetchBookings();\n  isModalVisible.value = false;\n}\n\nasync function deleteBooking(id) {\n  await axios.delete(`bookings/${id}/`).then((response) =&gt; {\n    if (response.status === 204) {\n      fetchBookings();\n    }\n  }).catch((error) =&gt; {\n    console.error(\"\u041e\u0448\u0438\u0431\u043a\u0430 \u043f\u0440\u0438 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0438 \u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f:\", error);\n  });\n}\n\nasync function confirmBooking(id) {\n  await axios.patch(`bookings/${id}/`, {state: \"confirmed\"}).then((response) =&gt; {\n    fetchBookings()\n  }).catch((error) =&gt; {\n    console.log(error);\n  })\n}\n\nfunction handleEditBooking(booking) {\n  selectedBooking.value = {...booking};\n  isModalVisible.value = true;\n}\n\nfunction handleAddBooking() {\n  selectedBooking.value = null;\n  isModalVisible.value = true;\n}\n\nonMounted(() =&gt; {\n  fetchBookings()\n  fetchClients()\n  fetchRooms()\n});\n&lt;/script&gt;\n\n&lt;template&gt;\n  &lt;v-container&gt;\n    &lt;template v-if=\"isLoading\"&gt;\n      &lt;v-skeleton-loader\n          type=\"card\"\n          class=\"mt-4\"\n          max-width=\"500\"\n      &gt;&lt;/v-skeleton-loader&gt;\n    &lt;/template&gt;\n    &lt;template v-else&gt;\n      &lt;h2&gt;\u0421\u043f\u0438\u0441\u043e\u043a \u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0439&lt;/h2&gt;\n      &lt;v-btn\n          color=\"primary\"\n          class=\"mb-4\"\n          @click=\"handleAddBooking\"\n      &gt;\n        \u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\n      &lt;/v-btn&gt;\n\n      &lt;BookingList\n          :bookings=\"reservations\"\n          @edit-booking=\"handleEditBooking\"\n          @delete-booking=\"deleteBooking\"\n          @confirm-booking=\"confirmBooking\"\n      /&gt;\n\n      &lt;BookingModal\n          v-model=\"isModalVisible\"\n          :booking=\"selectedBooking\"\n          :rooms=\"rooms\"\n          :clients=\"clients\"\n          @save-booking=\"saveBooking\"\n      /&gt;\n    &lt;/template&gt;\n  &lt;/v-container&gt;\n&lt;/template&gt;\n\n</code></pre>"},{"location":"lab_4/bookings/#_3","title":"\u0412\u043d\u0435\u0448\u043d\u0438\u0439 \u0432\u0438\u0434 \u0438\u0441\u0442\u043e\u0440\u0438\u0438 \u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0439","text":""},{"location":"lab_4/bookings/#_4","title":"\u041c\u043e\u0436\u0435\u043c \u043e\u0442\u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e","text":""},{"location":"lab_4/main/","title":"Main","text":""},{"location":"lab_4/main/#4-vuejs","title":"\u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f \u043f\u043e \u041b\u04204: \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Vue.js","text":""},{"location":"lab_4/main/#_1","title":"\u0421\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 \u043f\u0440\u043e\u0435\u043a\u0442\u0430:","text":"<pre><code>src\nC:.\n\u2502   App.vue\n\u2502   main.js\n\u2502\n\u251c\u2500\u2500\u2500assets\n\u2502       base.css\n\u2502       logo.svg\n\u2502       main.css\n\u2502\n\u251c\u2500\u2500\u2500components\n\u2502       BookingList.vue\n\u2502       BookingModal.vue\n\u2502       ClientList.vue\n\u2502       ClientModal.vue\n\u2502       EmployeeList.vue\n\u2502       EmployeeModal.vue\n\u2502       RoomBookModal.vue\n\u2502       RoomEditModal.vue\n\u2502       RoomList.vue\n\u2502       ScheduleModal.vue\n\u2502       ScheduleTable.vue\n\u2502\n\u251c\u2500\u2500\u2500stores\n\u2502       token.js\n\u2502\n\u251c\u2500\u2500\u2500utils\n\u2502       router.js\n\u2502\n\u2514\u2500\u2500\u2500views\n        BookingsView.vue\n        ClientDetailView.vue\n        ClientsView.vue\n        EmployeeDetailView.vue\n        EmployeesView.vue\n        LoginView.vue\n        RegisterView.vue\n        ReportView.vue\n        RoomDetailView.vue\n        RoomView.vue\n        ScheduleView.vue\n\n\n</code></pre>"},{"location":"lab_4/reg/","title":"Reg","text":""},{"location":"lab_4/reg/#_1","title":"\u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \u0432 \u0441\u0438\u0441\u0442\u0435\u043c\u0435:","text":""},{"location":"lab_4/reg/#_2","title":"\u0421\u043a\u0440\u0438\u043f\u0442 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b:","text":"<pre><code>&lt;script setup&gt;\nimport {ref} from \"vue\";\nimport router from \"@/utils/router.js\";\nimport {tokenStore} from \"@/stores/token.js\"\nimport axios from \"axios\";\n\nconst token = tokenStore()\nconst form = ref({\n  username: '',\n  password: ''\n})\n\nfunction login() {\n  axios.post('/auth/token/login', form.value).then(response =&gt; {\n        if (response.status === 200) {\n          token.setToken(response.data.auth_token)\n          router.push('/clients')\n        }\n      }\n  ).catch(error =&gt; console.log(error))\n}\n\nfunction register() {\n  router.push(\"/register\")\n}\n\n&lt;/script&gt;\n\n&lt;template&gt;\n  &lt;v-app&gt;\n    &lt;v-container class=\"d-flex align-center justify-center fill-height\"&gt;\n      &lt;div class=\"w-50 text-center\"&gt;\n        &lt;h2&gt;\u0412\u0445\u043e\u0434&lt;/h2&gt;\n        &lt;v-text-field label=\"\u041b\u043e\u0433\u0438\u043d\" v-model=\"form.username\"&gt;&lt;/v-text-field&gt;\n        &lt;v-text-field label=\"\u041f\u0430\u0440\u043e\u043b\u044c\" v-model=\"form.password\" type=\"password\"&gt;&lt;/v-text-field&gt;\n        &lt;div class=\"d-flex justify-center mt-4\"&gt;\n          &lt;v-btn class=\"mx-2\" color=\"primary\" @click=\"login\"&gt;\u0412\u043e\u0439\u0442\u0438&lt;/v-btn&gt;\n          &lt;v-btn class=\"mx-2\" color=\"secondary\" @click=\"register\"&gt;\u0417\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f&lt;/v-btn&gt;\n        &lt;/div&gt;\n      &lt;/div&gt;\n    &lt;/v-container&gt;\n  &lt;/v-app&gt;\n&lt;/template&gt;\n\n&lt;style scoped&gt;\n\n&lt;/style&gt;\n\n</code></pre>"},{"location":"lab_4/reg/#_3","title":"\u0412\u043d\u0435\u0448\u043d\u0438\u0439 \u0432\u0438\u0434 \u0444\u043e\u0440\u043c\u044b \u0434\u043b\u044f \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u043d\u0430 \u0441\u0430\u0439\u0442\u0435","text":""},{"location":"lab_4/room_list/","title":"Room list","text":""},{"location":"lab_4/room_list/#_1","title":"\u041e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 \u043d\u043e\u043c\u0435\u0440\u043e\u0432 \u0432 \u043e\u0442\u0435\u043b\u0435:","text":""},{"location":"lab_4/room_list/#_2","title":"\u0421\u043a\u0440\u0438\u043f\u0442 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b:","text":"<pre><code>&lt;script setup&gt;\nimport {computed, onMounted, ref} from \"vue\";\nimport {tokenStore} from \"@/stores/token.js\";\nimport axios from \"axios\";\nimport RoomList from \"@/components/RoomList.vue\";\n\nconst rooms = ref([])\nconst showOnlyFree = ref(false)\nconst isLoading = ref(true)\n\nasync function fetchRooms() {\n  await axios.get('/rooms').then(response =&gt; {\n    rooms.value = response.data\n  }).catch(error =&gt; {\n    console.log(error);\n  })\n}\n\nconst filteredRooms = computed(() =&gt;\n    showOnlyFree.value ? rooms.value.filter((room) =&gt; !room.is_occupied)\n        :\n        rooms.value)\n\nonMounted(async () =&gt; {\n  isLoading.value = true\n  await fetchRooms()\n  isLoading.value = false\n})\n&lt;/script&gt;\n\n&lt;template&gt;\n  &lt;v-container&gt;\n    &lt;template v-if=\"isLoading\"&gt;\n      &lt;v-skeleton-loader\n          type=\"card, card, card\"\n          class=\"mt-4\"\n          max-width=\"500\"\n      /&gt;\n    &lt;/template&gt;\n    &lt;template v-else&gt;\n      &lt;h2&gt;\u0421\u043f\u0438\u0441\u043e\u043a \u043a\u043e\u043c\u043d\u0430\u0442&lt;/h2&gt;\n      &lt;v-checkbox\n          v-model=\"showOnlyFree\"\n          label=\"\u0422\u043e\u043b\u044c\u043a\u043e \u0441\u0432\u043e\u0431\u043e\u0434\u043d\u044b\u0435 \u043a\u043e\u043c\u043d\u0430\u0442\u044b\"\n      /&gt;\n      &lt;RoomList :rooms=\"filteredRooms\"/&gt;\n    &lt;/template&gt;\n  &lt;/v-container&gt;\n&lt;/template&gt;\n\n&lt;style scoped&gt;\n\n&lt;/style&gt;\n</code></pre>"},{"location":"lab_4/room_list/#_3","title":"\u0412\u043d\u0435\u0448\u043d\u0438\u0439 \u0432\u0438\u0434 \u0441\u043f\u0438\u0441\u043a\u0430 \u043d\u043e\u043c\u0435\u0440\u043e\u0432","text":"<p>img_7.png</p>"},{"location":"lab_4/room_list/#_4","title":"\u041d\u0435\u043f\u043e\u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0435\u043d\u043d\u043e \u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435","text":""}]}